package com.jits.routing;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import com.jits.shipping.JitsException;

public class RouterTest {
	
	private Router router;
	
	@Before 
	public void setUp() throws Exception {
		router = new Router();
	}
	
	@Rule
	public ExpectedException thrown = ExpectedException.none(); 

	@Test
	public void testLookUpDistributionCenter() throws JitsException {
		String expectedGA = "Raleigh";
		String actualGA = router.distributionCenterLookup("GA").getCity();
		
		String expectedWI = "Kansas City";
		String actualWI = router.distributionCenterLookup("WI").getCity();
		
		String expectedID = "Denver";
		String actualID = router.distributionCenterLookup("ID").getCity();
		
		String expectedHI = "N/A";
		String actualHI = router.distributionCenterLookup("HI").getCity();
		
		assertEquals(expectedGA, actualGA);
		assertEquals(expectedWI, actualWI);
		assertEquals(expectedID, actualID);
		assertEquals(expectedHI, actualHI);
	}
	
	@Test
	public void testInvalidStateRequest() throws JitsException {

		try {
			router.distributionCenterLookup("why");
			throw new JitsException();
			
			
		} catch(JitsException e) {
			System.out.println(e.getMessage());
		}
		
	}
	
	@Test
	public void testStateLookup() throws JitsException {

		String expectedAK = "AK";
		String actualAK = router.stateLookup("99685");
		
		String expectedCA = "CA";
		String actualCA = router.stateLookup("90001");
		
		String expectedGA = "GA";
		String actualGA = router.stateLookup("30339");
		
		assertEquals(expectedAK, actualAK);
		assertEquals(expectedCA, actualCA);
		assertEquals(expectedGA, actualGA);
	}

}
